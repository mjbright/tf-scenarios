
## Docker Sources: ==============================================================

source "docker" "vnc" {
  image  = "ubuntu:noble"

  # expected commit, discard, or export_path:
  #commit = true
  commit = false
  discard = true
}

## AWS Sources: =================================================================

# AWS sources originally autogenerated by the 'packer hcl2_upgrade' command. ...

data "amazon-ami" "ubuntu2404" {
  filters = {
    name                               = "ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-amd64-server-*"
    root-device-type                   = "ebs"
  }
  most_recent = true
  #owners      = ["amazon"]
  owners      = [ "099720109477"]
  region      = var.aws_regions[0]
}

locals { 
  ami_name = "ub2404-vnc-ami-${formatdate("YYYY-MM-DD-hhmmss", timestamp())}"
}

source "amazon-ebs" "vnc" {
  # skip_create_ami = ( var.source_builds[0] == "SKIP" ? true : false )

  source_ami    = data.amazon-ami.ubuntu2404.id
  ami_name      = local.ami_name

  region        = var.aws_regions[0]
  ami_regions   = var.aws_regions

  instance_type = var.instance_type
  ssh_username  = "ubuntu"
  tags = {
    Name            = "ami-${var.app_name}-${var.build_number}"
    app-environment = "Dev"
    app-version     = "1.0.0"
    instance-type   = var.instance_type
    platform        = var.platform
  }
}

## Azure Sources: ===============================================================

locals { 
  image_name = "packer-ub2204-vnc-az-${formatdate("YYYY-MM-DD-hhmmss", timestamp())}"
}

source "azure-arm" "vnc" {
  use_azure_cli_auth       = true

  managed_image_name                = local.image_name
  managed_image_resource_group_name = var.gallery_resource_group

  # Canonical:ubuntu-24_04-lts:server:latest
  # Search for images using:
  #   az vm image list --architecture x64 --publisher Canonical --offer ubuntu-24_04-lts-daily --sku server --all --output table |
  #     tee ~/tmp/az_x64_2404_images.txt
  image_offer                       = "ubuntu-24_04-lts-daily"
  image_publisher                   = "Canonical"
  image_sku                         = "server"
  public_ip_sku                     = "Standard"
  location                          = "East US"
  os_type                           = "Linux"
  vm_size                           = "Standard_B1s"

  shared_image_gallery_destination {
    resource_group       = var.gallery_resource_group
    gallery_name         = var.gallery_name
    image_name           = var.gallery_image_name 
    image_version        = var.gallery_image_version
    replication_regions  = ["eastus"]
    storage_account_type = "Standard_LRS"
  }
}

## Proxmox Sources: =============================================================

source "proxmox-iso" "vnc" {
 
    # Proxmox Connection Settings
    proxmox_url = "${var.pm_api_url}"
    username    = "${var.pm_api_token_id}"
    token       = "${var.pm_api_token_secret}"

    # (Optional) Skip TLS Verification
    insecure_skip_tls_verify = true
    
    # VM General Settings
    node        = var.pm_node

    # my chosen TEMPLATE id for ubuntu 24.04:
    vm_id       = "99999125"
    vm_name     = "ubuntu-server-24-04-lts-tightvncserver"
    template_description = "[packer] Ubuntu Server 24.04 LTS - Noble Numbat"

    # VM OS Settings
    #iso_file         = "local:iso/ubuntu-24.04-live-server-amd64.iso"
    iso_file         = "local:iso/noble-live-server-amd64.iso"
    iso_storage_pool = "local"
    unmount_iso      = true
    template_name    = "packer-ubuntu2404-tightvncserver"

    # VM System Settings
    qemu_agent = true

    # VM Hard Disk Settings
    scsi_controller = "virtio-scsi-pci"

    disks {
        disk_size    = var.disk_size
        format       = "raw"
        storage_pool = "local-lvm"
        type         = "virtio"
    }

    # VM CPU/Memory Settings
    cores  = "1"
    memory = "2048" 

    # VM Network Settings
    network_adapters {
        model    = "virtio"
        bridge   = "vmbr0"
        firewall = "false"
    } 

    # VM Cloud-Init Settings
    cloud_init              = true
    cloud_init_storage_pool = "local-lvm"

    # PACKER Boot Commands
    boot_command = [
        "<esc><wait>",
        "e<wait>",
        "<down><down><down><end>",
        "<bs><bs><bs><bs><wait>",
        "autoinstall ds=nocloud-net\\;s=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ ---<wait>",
        "<f10><wait>"
    ]
    boot = "c"
    boot_wait = "5s"

    # PACKER Autoinstall Settings
    http_directory = "./http" 
    # (Optional) Bind IP Address and Port
    #   http_bind_address = "10.1.149.166"
    #   http_port_min = 8802
    #   http_port_max = 8802

    # -- ssh ---------------------------------------------------------
    # NOTE: ssh_username/ssh_password/ssh_private_key_file parameters if used must be consistent with
    #       http/user-data entries:
    ssh_username = "ubuntu"

    # (Option 1) Add your Password here
    # ssh_password = "ubuntu"
    # ssh_password = "MJB pass"
    # - or -
    # (Option 2) Add your Private SSH KEY file here (as per user_data provided public key !)
    # STILL EMPTY authorized_keys file: ssh_private_key_file = "/home/mjb/.ssh/id_ed25519"
    ssh_private_key_file = pathexpand( var.ssh_private_key_file )

    # Raise the timeout, when installation takes longer eg. for X11/tightVNC packages installation:
    ssh_timeout = "40m"
}

